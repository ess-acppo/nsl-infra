grails.serverURL = "{{mapper.grails.serverURL}}"

mapper {
    resolverURL = "{{mapper.resolverURL}}"
    contextExtension = '' //extension to the context path (after nsl-mapper).
    defaultProtocol = 'https'

    defaultResolver = { ident ->
        println "nsl-mapper-config.groovy; ident: ${ident}"
        Map serviceHosts = [
                {{shard_namespace}}: 'https://{{ elb_dns }}'
        ]

        String host = serviceHosts[ident.nameSpace]
        if (ident.objectType == 'treeElement') {
            return "${host}/nxl/services/rest/${ident.objectType}/${ident.versionNumber}/${ident.idNumber}"
        }
        return "${host}/nxl/services/rest/${ident.objectType}/${ident.nameSpace}/${ident.idNumber}"
    }
    
    format = [
            html: [
                    resolver: defaultResolver
            ],
            json: [
                    resolver: defaultResolver
            ],
            xml : [
                    resolver: defaultResolver
            ],
            rdf : [
                    resolver: { ident ->
                        String url = "DESCRIBE <http://biodiversity.org.au/boa/${ident.objectType}/${ident.nameSpace}/${ident.idNumber}>".encodeAsURL()
                        "sparql/?query=${url}"
                    }
            ]
    ]

}

api.auth = [
        '{{services.grails.api_key}}': [
                application: 'nsl/services',
                roles      : ['admin'],
        ],
        '{{Rails.configuration.api_key}}': [
                application: 'nxl/editor',
                roles      : ['admin']
        ]
]

ldap {
    skip{
      authentication = false
    }
    domain = 'domain'
    server.url = 'ldap://{{Rails.configuration.ldap_host}}:{{Rails.configuration.ldap_port}}'
    search {
        base = '{{Rails.configuration.ldap_user_base}}'
        user = '{{Rails.configuration.ldap_admin_username}}'
        pass = '{{Rails.configuration.ldap_admin_password}}'

        group {
            name = '{{Rails.configuration.ldap_groups}}'
            member {
                element = 'uniqueMember'
                prefix = 'uid='
                postfix = ''
            }
        }
    }
}
